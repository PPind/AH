{"ast":null,"code":"export default {\n  name: \"Post\",\n  computed: {\n    postList() {\n      return this.$store.state.postList.map(post => {\n        return {\n          ...post,\n          transformedDate: this.ISO8601ToText(post.date)\n        };\n      });\n    },\n    sortedPosts() {\n      // Sort posts by pinned status (pinned first) and then by date\n      return this.postList.slice().sort((a, b) => {\n        if (a.isPinned !== b.isPinned) {\n          return b.isPinned - a.isPinned; // Pinned posts come first\n        }\n        // Convert ISO 8601 dates to Date objects for comparison\n        const dateA = new Date(a.date);\n        const dateB = new Date(b.date);\n        return dateB - dateA; // Sort by date if not pinned\n      });\n    },\n    hasPinnedPost() {\n      return this.postList && this.postList.length > 0 && this.postList.some(post => post.isPinned);\n    },\n    pinnedPost() {\n      return this.postList && this.postList.find(post => post.isPinned);\n    },\n    nonPinnedPosts() {\n      return this.postList ? this.postList.filter(post => !post.isPinned) : [];\n    }\n  },\n  methods: {\n    ISO8601ToText(ISOdate) {\n      var chunks = ISOdate.split('-');\n      var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\n    },\n    Increase(postID) {\n      this.$store.dispatch(\"IncreaseDislikeAct\", postID);\n    }\n  }\n};","map":{"version":3,"names":["name","computed","postList","$store","state","map","post","transformedDate","ISO8601ToText","date","sortedPosts","slice","sort","a","b","isPinned","dateA","Date","dateB","hasPinnedPost","length","some","pinnedPost","find","nonPinnedPosts","filter","methods","ISOdate","chunks","split","months","parseInt","Increase","postID","dispatch"],"sources":["C:\\Users\\Marlene\\AH\\frontend\\src\\components\\Post.vue"],"sourcesContent":["<template>\r\n    <div class = \"postComp\">\r\n        <div class = \"post\" v-for = \"post in sortedPosts\" :key=\"id\">\r\n            <h2 v-if = \"post.isPinned\" class=\"pinned\">PINNED:</h2>\r\n            <div class = \"postHeader\">\r\n                <img class = \"userIcon\" :src = \"post.userIcon\"/>\r\n                <p class = \"userName\">{{ post.user }}</p>\r\n                <p class=\"date\">{{ post.transformedDate }}</p>\r\n            </div>\r\n            <div class=\"postContent\">\r\n                <h1 class = \"title\">{{ post.title }}</h1>\r\n                <img class=\"postImage\" :src=post.postImage />\r\n                <p>{{ post.text }}</p>\r\n            </div>\r\n            \r\n            <div class = \"postDislikes\">\r\n                <img class = \"dislikesImg\" v-on:click=\"Increase(post.id)\" src=\"../assets/dislike.png\"/>\r\n                <p class = \"postDislikesP\">{{ post.dislikes }}</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\nname: \"Post\",\r\ncomputed: {\r\n    postList(){\r\n        return this.$store.state.postList.map(post => {\r\n            return {\r\n                ...post,\r\n                transformedDate : this.ISO8601ToText(post.date)\r\n            }\r\n        })\r\n    },\r\n    sortedPosts() {\r\n    // Sort posts by pinned status (pinned first) and then by date\r\n    return this.postList.slice().sort((a, b) => {\r\n      if (a.isPinned !== b.isPinned) {\r\n        return b.isPinned - a.isPinned; // Pinned posts come first\r\n      }\r\n      // Convert ISO 8601 dates to Date objects for comparison\r\n      const dateA = new Date(a.date);\r\n      const dateB = new Date(b.date);\r\n      return dateB - dateA; // Sort by date if not pinned\r\n    });\r\n  },\r\n    hasPinnedPost() {\r\n        return this.postList && this.postList.length > 0 && this.postList.some(post => post.isPinned);\r\n    },\r\n    pinnedPost() {\r\n        return this.postList && this.postList.find(post => post.isPinned);\r\n    },\r\n    nonPinnedPosts() {\r\n        return this.postList ? this.postList.filter(post => !post.isPinned) : [];\r\n    }\r\n},\r\nmethods: {\r\n    ISO8601ToText(ISOdate) {\r\n      var chunks = ISOdate.split('-');\r\n      var months = [\r\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n      ];\r\n      return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\r\n    },\r\n    Increase(postID) {\r\n        this.$store.dispatch(\"IncreaseDislikeAct\", postID)\r\n    },\r\n    }\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.post {\r\n    margin: 15px auto;\r\n    border-style: dotted;\r\n    border-color: hotpink;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n}\r\n\r\n.postHeader {\r\n    width: 95%;\r\n    margin: auto;\r\n    padding: 1%;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.postContent {\r\n    border-radius: 15px;\r\n    background-color: rgb(245, 189, 240);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.postDislikes{\r\n    display: flex;\r\n    flex-direction: row;\r\n    text-align: left;\r\n    padding: 1%;\r\n}\r\n.title {\r\n    padding-right: 8px;\r\n    font-size: 20px;\r\n}\r\n\r\n.post h1::first-letter {\r\n    font-size: 25px;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.userIcon {\r\n    float: left;\r\n    height: 50px;\r\n    width: 50px;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.userName{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n}\r\n\r\n.postImage {\r\n    align-self: center;\r\n    max-width: 60%;\r\n    object-fit: contain;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.pinned {\r\n    float: left;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.date {\r\n    margin-left: auto;\r\n    padding-left: 4px;\r\n    border-left: 2px solid black;\r\n}\r\n\r\n.dislikesImg{\r\n    height:10%;\r\n    width: 10%;\r\n    display: inline;\r\n}\r\n\r\n.dislikesImg:hover{\r\n    cursor: pointer;\r\n    opacity: 70%;\r\n}\r\n.postDislikesP{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    display: inline;\r\n}\r\n</style>"],"mappings":"AA0BA,eAAe;EACfA,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE;IACNC,QAAQA,CAAA,EAAE;MACN,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,QAAQ,CAACG,GAAG,CAACC,IAAG,IAAK;QAC1C,OAAO;UACH,GAAGA,IAAI;UACPC,eAAc,EAAI,IAAI,CAACC,aAAa,CAACF,IAAI,CAACG,IAAI;QAClD;MACJ,CAAC;IACL,CAAC;IACDC,WAAWA,CAAA,EAAG;MACd;MACA,OAAO,IAAI,CAACR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC1C,IAAID,CAAC,CAACE,QAAO,KAAMD,CAAC,CAACC,QAAQ,EAAE;UAC7B,OAAOD,CAAC,CAACC,QAAO,GAAIF,CAAC,CAACE,QAAQ,EAAE;QAClC;QACA;QACA,MAAMC,KAAI,GAAI,IAAIC,IAAI,CAACJ,CAAC,CAACJ,IAAI,CAAC;QAC9B,MAAMS,KAAI,GAAI,IAAID,IAAI,CAACH,CAAC,CAACL,IAAI,CAAC;QAC9B,OAAOS,KAAI,GAAIF,KAAK,EAAE;MACxB,CAAC,CAAC;IACJ,CAAC;IACCG,aAAaA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACjB,QAAO,IAAK,IAAI,CAACA,QAAQ,CAACkB,MAAK,GAAI,KAAK,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAACf,IAAG,IAAKA,IAAI,CAACS,QAAQ,CAAC;IACjG,CAAC;IACDO,UAAUA,CAAA,EAAG;MACT,OAAO,IAAI,CAACpB,QAAO,IAAK,IAAI,CAACA,QAAQ,CAACqB,IAAI,CAACjB,IAAG,IAAKA,IAAI,CAACS,QAAQ,CAAC;IACrE,CAAC;IACDS,cAAcA,CAAA,EAAG;MACb,OAAO,IAAI,CAACtB,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACuB,MAAM,CAACnB,IAAG,IAAK,CAACA,IAAI,CAACS,QAAQ,IAAI,EAAE;IAC5E;EACJ,CAAC;EACDW,OAAO,EAAE;IACLlB,aAAaA,CAACmB,OAAO,EAAE;MACrB,IAAIC,MAAK,GAAID,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAIC,MAAK,GAAI,CACX,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAI,CAClF;MACD,OAAOA,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAE,GAAIA,MAAM,CAAC,CAAC,IAAI,IAAG,GAAIA,MAAM,CAAC,CAAC,CAAC;IAC7E,CAAC;IACDI,QAAQA,CAACC,MAAM,EAAE;MACb,IAAI,CAAC9B,MAAM,CAAC+B,QAAQ,CAAC,oBAAoB,EAAED,MAAM;IACrD;EACA;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}