{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nimport _imports_0 from '../../../frontend/src/assets/dislike.png';\nconst _hoisted_1 = {\n  class: \"post\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"pinned\"\n};\nconst _hoisted_3 = {\n  class: \"postHeader\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"userName\"\n};\nconst _hoisted_6 = {\n  class: \"date\"\n};\nconst _hoisted_7 = {\n  class: \"postContent\"\n};\nconst _hoisted_8 = {\n  class: \"title\"\n};\nconst _hoisted_9 = [\"src\"];\nconst _hoisted_10 = {\n  class: \"postDislikes\"\n};\nconst _hoisted_11 = {\n  class: \"postDislikesP\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$options.post.isPinned ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_2, \"PINNED:\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"img\", {\n    class: \"userIcon\",\n    src: $options.post.userIcon\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"p\", _hoisted_5, _toDisplayString($options.post.user), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_6, _toDisplayString($options.post.transformedDate), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h1\", _hoisted_8, _toDisplayString($options.post.title), 1 /* TEXT */), _createElementVNode(\"img\", {\n    class: \"postImage\",\n    src: $options.post.postImage\n  }, null, 8 /* PROPS */, _hoisted_9), _createElementVNode(\"p\", null, _toDisplayString($options.post.text), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"img\", {\n    class: \"dislikesImg\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.Increase($options.post.id)),\n    src: _imports_0\n  }), _createElementVNode(\"p\", _hoisted_11, _toDisplayString($options.post.dislikes), 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["_imports_0","class","_createElementBlock","_hoisted_1","$options","post","isPinned","_hoisted_2","_createElementVNode","_hoisted_3","src","userIcon","_hoisted_5","_toDisplayString","user","_hoisted_6","transformedDate","_hoisted_7","_hoisted_8","title","postImage","text","_hoisted_10","onClick","_cache","$event","Increase","id","_hoisted_11","dislikes"],"sources":["C:\\Users\\karlk\\Documents\\2023Sygis\\WAD\\AH\\frontend\\src\\components\\OnePost.vue"],"sourcesContent":["<template>\r\n    <div class = \"post\">\r\n        <h2 v-if = \"post.isPinned\" class=\"pinned\">PINNED:</h2>   \r\n        <div class = \"postHeader\">\r\n            <img class = \"userIcon\" :src = \"post.userIcon\"/>\r\n            <p class = \"userName\">{{ post.user }}</p>\r\n            <p class=\"date\">{{ post.transformedDate }}</p>\r\n        </div>\r\n        <div class=\"postContent\">\r\n                <h1 class = \"title\">{{ post.title }}</h1>\r\n            <img class=\"postImage\" :src=post.postImage />\r\n            <p>{{ post.text }}</p>\r\n        </div>\r\n        \r\n        <div class = \"postDislikes\">\r\n            <img class = \"dislikesImg\" v-on:click=\"Increase(post.id)\" src=\"../../../frontend/src/assets/dislike.png\"/>\r\n            <p class = \"postDislikesP\">{{ post.dislikes }}</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"Post\",\r\n        computed: {\r\n            post(){\r\n                for (let el of this.$store.state.postList) {\r\n                    console.log(\"el.id: \" + el.id);\r\n                    console.log(\"this.id: \" + this.$route.params.id);\r\n                    if (el.id == this.$route.params.id) {\r\n                        console.log('ISOdate:', el.date);\r\n                        return {...el, transformedDate: this.ISO8601ToText(el.date)}\r\n                    }\r\n                }\r\n            },\r\n            sortedPosts() {\r\n                // Sort posts by pinned status (pinned first) and then by date\r\n                return this.postList.slice().sort((a, b) => {\r\n                    if (a.isPinned !== b.isPinned) {\r\n                        return b.isPinned - a.isPinned; // Pinned posts come first\r\n                    }\r\n                    // Convert ISO 8601 dates to Date objects for comparison\r\n                    const dateA = new Date(a.date);\r\n                    const dateB = new Date(b.date);\r\n                    return dateB - dateA; // Sort by date if not pinned\r\n                });\r\n            }\r\n        },\r\n        methods: {\r\n            ISO8601ToText(ISOdate) {\r\n                var chunks = ISOdate.split('-');\r\n                var months = [\r\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n                ];\r\n                return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\r\n            },\r\n            Increase(postID) {\r\n                this.$store.dispatch(\"IncreaseDislikeAct\", postID)\r\n            },\r\n        }\r\n    };\r\n</script>\r\n\r\n\r\n<style>\r\n.post {\r\n    margin: 15px auto;\r\n    border-style: dotted;\r\n    border-color: hotpink;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n}\r\n\r\n.postHeader {\r\n    width: 95%;\r\n    margin: auto;\r\n    padding: 1%;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.postContent {\r\n    border-radius: 15px;\r\n    background-color: rgb(245, 189, 240);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.postDislikes{\r\n    display: flex;\r\n    flex-direction: row;\r\n    text-align: left;\r\n    padding: 1%;\r\n}\r\n.title {\r\n    padding-right: 8px;\r\n    font-size: 20px;\r\n}\r\n\r\n.post h1::first-letter {\r\n    font-size: 25px;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.userIcon {\r\n    float: left;\r\n    height: 50px;\r\n    width: 50px;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.userName{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n}\r\n\r\n.postImage {\r\n    align-self: center;\r\n    max-width: 60%;\r\n    object-fit: contain;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.pinned {\r\n    float: left;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.date {\r\n    margin-left: auto;\r\n    padding-left: 4px;\r\n    border-left: 2px solid black;\r\n}\r\n\r\n.dislikesImg{\r\n    height:10%;\r\n    width: 10%;\r\n    display: inline;\r\n}\r\n\r\n.dislikesImg:hover{\r\n    cursor: pointer;\r\n    opacity: 70%;\r\n}\r\n.postDislikesP{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    display: inline;\r\n}\r\n</style>"],"mappings":";OAesEA,UAA8C;;EAd3GC,KAAK,EAAG;AAAM;;;EACYA,KAAK,EAAC;;;EAC5BA,KAAK,EAAG;AAAY;;;EAElBA,KAAK,EAAG;AAAU;;EAClBA,KAAK,EAAC;AAAM;;EAEdA,KAAK,EAAC;AAAa;;EACZA,KAAK,EAAG;AAAO;;;EAKtBA,KAAK,EAAG;AAAc;;EAEpBA,KAAK,EAAG;AAAe;;uBAflCC,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBUC,QAAA,CAAAC,IAAI,CAACC,QAAQ,I,cAAzBJ,mBAAA,CAAsD,MAAtDK,UAAsD,EAAZ,SAAO,K,mCACjDC,mBAAA,CAIM,OAJNC,UAIM,GAHFD,mBAAA,CAAgD;IAA3CP,KAAK,EAAG,UAAU;IAAES,GAAG,EAAIN,QAAA,CAAAC,IAAI,CAACM;uCACrCH,mBAAA,CAAyC,KAAzCI,UAAyC,EAAAC,gBAAA,CAAhBT,QAAA,CAAAC,IAAI,CAACS,IAAI,kBAClCN,mBAAA,CAA8C,KAA9CO,UAA8C,EAAAF,gBAAA,CAA3BT,QAAA,CAAAC,IAAI,CAACW,eAAe,iB,GAE3CR,mBAAA,CAIM,OAJNS,UAIM,GAHET,mBAAA,CAAyC,MAAzCU,UAAyC,EAAAL,gBAAA,CAAlBT,QAAA,CAAAC,IAAI,CAACc,KAAK,kBACrCX,mBAAA,CAA6C;IAAxCP,KAAK,EAAC,WAAW;IAAES,GAAG,EAACN,QAAA,CAAAC,IAAI,CAACe;uCACjCZ,mBAAA,CAAsB,WAAAK,gBAAA,CAAhBT,QAAA,CAAAC,IAAI,CAACgB,IAAI,iB,GAGnBb,mBAAA,CAGM,OAHNc,WAGM,GAFFd,mBAAA,CAA0G;IAArGP,KAAK,EAAG,aAAa;IAAMsB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAErB,QAAA,CAAAsB,QAAQ,CAACtB,QAAA,CAAAC,IAAI,CAACsB,EAAE;IAAGjB,GAA8C,EAA9CV;MAC1DQ,mBAAA,CAAkD,KAAlDoB,WAAkD,EAAAf,gBAAA,CAApBT,QAAA,CAAAC,IAAI,CAACwB,QAAQ,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}