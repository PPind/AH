{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home\"\n};\nconst _hoisted_2 = {\n  class: \"main\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"pinned\"\n};\nconst _hoisted_4 = {\n  class: \"postContent\"\n};\nconst _hoisted_5 = {\n  class: \"title\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"body\"\n}, \"Body: \", -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"nupud\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_header_x_d = _resolveComponent(\"header-x-d\");\n  const _component_aside_x_d = _resolveComponent(\"aside-x-d\");\n  const _component_footer_x_d = _resolveComponent(\"footer-x-d\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_header_x_d), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_aside_x_d, {\n    class: \"aside1\"\n  }), _createElementVNode(\"div\", _hoisted_2, [$data.post.isPinned ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_3, \"PINNED:\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h1\", _hoisted_5, _toDisplayString($data.post.title), 1 /* TEXT */), _hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    name: \"body\",\n    type: \"text\",\n    id: \"body\",\n    required: \"\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.post.body = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.post.body]])]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.updatePost && $options.updatePost(...args)),\n    class: \"updatePost\"\n  }, \"Update Post\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.deletePost && $options.deletePost(...args)),\n    class: \"deletePost\"\n  }, \"Delete Post\")])]), _createVNode(_component_aside_x_d, {\n    class: \"aside2\"\n  })]), _createVNode(_component_footer_x_d)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","for","_createVNode","_component_header_x_d","_hoisted_1","_component_aside_x_d","_hoisted_2","$data","post","isPinned","_createElementBlock","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","title","_hoisted_6","name","type","id","required","body","$event","_hoisted_7","onClick","_cache","args","$options","updatePost","deletePost","_component_footer_x_d"],"sources":["C:\\Users\\ppind\\Documents\\3 semester\\AH\\frontend\\src\\views\\APost.vue"],"sourcesContent":["<template>\r\n    <header-x-d></header-x-d>\r\n    <div class=\"home\">\r\n  \r\n      <aside-x-d class = \"aside1\"></aside-x-d>\r\n  \r\n      <div class=\"main\">\r\n        <h2 v-if = \"post.isPinned\" class=\"pinned\">PINNED:</h2>\r\n            <div class=\"postContent\">\r\n                <h1 class = \"title\">{{ post.title }}</h1>\r\n                \r\n                <label for=\"body\">Body: </label>\r\n      <input name=\"body\" type=\"text\" id=\"body\" required v-model=\"post.body\" />\r\n            </div>\r\n            <div class=\"nupud\">\r\n                <button @click=\"updatePost\" class=\"updatePost\">Update Post</button>\r\n                <button @click=\"deletePost\" class=\"deletePost\">Delete Post</button>\r\n            </div>\r\n      </div>\r\n      \r\n      \r\n      <aside-x-d class = \"aside2\"></aside-x-d>\r\n  \r\n    </div>\r\n    <footer-x-d></footer-x-d>\r\n  </template>\r\n  \r\n  <script>\r\n  // @ is an alias to /sr\r\n  import OnePost from '@/components/OnePost.vue'\r\n  import AsideXD from '@/components/Aside.vue'\r\n  import HeaderXD from '@/components/Header.vue'\r\n  import FooterXD from '@/components/Footer.vue'\r\n  \r\n  export default {\r\n    name: \"APost\",\r\n    components: {OnePost, AsideXD, HeaderXD, FooterXD},\r\n    data() {\r\n            return {\r\n                post: {\r\n                title: \"\",\r\n                body: \"\",\r\n                date: \"\",\r\n                \r\n            },\r\n            };\r\n        }, \r\n        \r\n        methods: {\r\n            ISO8601ToText(ISOdate) {\r\n                var chunks = ISOdate.split('-');\r\n                var months = [\r\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n                ];\r\n                return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\r\n            },\r\n            fetchAPost(id) {\r\n            // fetch one post with the specied id (id)\r\n                fetch(`http://localhost:3000/api/posts/${id}`)\r\n                    .then((response) => response.json())\r\n                    .then((data) => (this.post = data))\r\n                    .catch((err) => console.log(err.message));\r\n            },\r\n            updatePost() {\r\n            // using Fetch - put method - updates a specific post based on the passed id and the specified body\r\n                fetch(`http://localhost:3000/api/posts/${this.post.id}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(this.post),\r\n            })\r\n                .then((response) => {\r\n                console.log(response.data);\r\n                //this.$router.push(\"/apost/\" + this.post.id);\r\n                // We are using the router instance of this element to navigate to a different URL location\r\n                this.$router.push(\"/\");\r\n                })\r\n                .catch((e) => {\r\n                console.log(e);\r\n                });\r\n            },\r\n            deletePost() {\r\n            // using Fetch - delete method - delets a specific post based on the passed id\r\n                fetch(`http://localhost:3000/api/posts/${this.post.id}`, {\r\n                    method: \"DELETE\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                })\r\n                    .then((response) => {\r\n                    console.log(response.data);\r\n                    // We are using the router instance of this element to navigate to a different URL location\r\n                    this.$router.push(\"/\");\r\n                    })\r\n                    .catch((e) => {\r\n                    console.log(e);\r\n                    });\r\n            },\r\n        },\r\n        mounted() {\r\n            // call fetchAPost() when this element mounts, and pass to it a route parameter  (id)\r\n            // Route parameters (this.$route.params.id) are named URL segments that are used to capture the values specified at their \r\n            // position in the URL. The captured values are populated in the req.params object, with the name \r\n            // of the route parameter specified in the path as their respective keys\r\n            this.fetchAPost(this.$route.params.id);\r\n        },\r\n        };\r\n  </script>\r\n  \r\n  <style>\r\n  .main {\r\n      background-color: rgb(255, 217, 252);\r\n      margin: 10px auto;\r\n      padding: 10px 20px;\r\n      min-width: 350px;\r\n      max-width: 60%;\r\n      border-radius: 15px;\r\n      flex-direction: row;\r\n      display: block;\r\n      flex: 1;\r\n  }\r\n  \r\n  .home {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  @media (max-width: 800px) {\r\n      .aside1, .aside2 {\r\n          display: none;\r\n      }\r\n  }\r\n  \r\n  .aside1, .aside2 {\r\n      background: rgb(255, 217, 252);\r\n      flex-basis: calc((100% - 960px) / 2);\r\n      padding: 20px;\r\n      max-width: 200px;\r\n      overflow: hidden;\r\n      border-radius: 15px;\r\n  }\r\n  .postContent {\r\n    border-radius: 15px;\r\n    background-color: rgb(245, 189, 240);\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom:2%;\r\n}\r\n#body{\r\n  padding:2%;\r\n}\r\n  </style>"],"mappings":";;EAESA,KAAK,EAAC;AAAM;;EAIVA,KAAK,EAAC;AAAM;;;EACYA,KAAK,EAAC;;;EACxBA,KAAK,EAAC;AAAa;;EAChBA,KAAK,EAAG;AAAO;gCAEnBC,mBAAA,CAAgC;EAAzBC,GAAG,EAAC;AAAM,GAAC,QAAM;;EAGvBF,KAAK,EAAC;AAAO;;;;;6DAb1BG,YAAA,CAAyBC,qBAAA,GACzBH,mBAAA,CAqBM,OArBNI,UAqBM,GAnBJF,YAAA,CAAwCG,oBAAA;IAA7BN,KAAK,EAAG;EAAQ,IAE3BC,mBAAA,CAYM,OAZNM,UAYM,GAXQC,KAAA,CAAAC,IAAI,CAACC,QAAQ,I,cAAzBC,mBAAA,CAAsD,MAAtDC,UAAsD,EAAZ,SAAO,K,mCAC7CX,mBAAA,CAKM,OALNY,UAKM,GAJFZ,mBAAA,CAAyC,MAAzCa,UAAyC,EAAAC,gBAAA,CAAlBP,KAAA,CAAAC,IAAI,CAACO,KAAK,kBAEjCC,UAAgC,E,gBAC1ChB,mBAAA,CAAwE;IAAjEiB,IAAI,EAAC,MAAM;IAACC,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,MAAM;IAACC,QAAQ,EAAR,EAAQ;+DAAUb,KAAA,CAAAC,IAAI,CAACa,IAAI,GAAAC,MAAA;iDAATf,KAAA,CAAAC,IAAI,CAACa,IAAI,E,KAE9DrB,mBAAA,CAGM,OAHNuB,UAGM,GAFFvB,mBAAA,CAAmE;IAA1DwB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;IAAE3B,KAAK,EAAC;KAAa,aAAW,GAC1DC,mBAAA,CAAmE;IAA1DwB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,UAAA,IAAAF,QAAA,CAAAE,UAAA,IAAAH,IAAA,CAAU;IAAE3B,KAAK,EAAC;KAAa,aAAW,E,KAKpEG,YAAA,CAAwCG,oBAAA;IAA7BN,KAAK,EAAG;EAAQ,G,GAG7BG,YAAA,CAAyB4B,qBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}