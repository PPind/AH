{"ast":null,"code":"export default {\n  name: \"Post\",\n  data() {\n    return {\n      posts: []\n    };\n  },\n  computed: {\n    postList() {\n      return this.posts.map(post => {\n        return {\n          ...post,\n          transformedDate: this.ISO8601ToText(post.date)\n        };\n      });\n    },\n    sortedPosts() {\n      // Sort posts by pinned status (pinned first) and then by date\n      return this.postList.slice().sort((a, b) => {\n        if (a.isPinned !== b.isPinned) {\n          return b.isPinned - a.isPinned; // Pinned posts come first\n        }\n        // Convert ISO 8601 dates to Date objects for comparison\n        const dateA = new Date(a.date);\n        const dateB = new Date(b.date);\n        return dateB - dateA; // Sort by date if not pinned\n      });\n    }\n  },\n  methods: {\n    ISO8601ToText(ISOdate) {\n      var chunks = ISOdate.split('-');\n      var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\n    },\n    Increase(postID) {\n      this.$store.dispatch(\"IncreaseDislikeAct\", postID);\n    },\n    fetchPosts() {\n      fetch(`http://localhost:3000/api/posts/`).then(response => response.json()).then(data => this.posts = data).catch(err => console.log(err.message));\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n    console.log(\"mounted\");\n  }\n};","map":{"version":3,"names":["name","data","posts","computed","postList","map","post","transformedDate","ISO8601ToText","date","sortedPosts","slice","sort","a","b","isPinned","dateA","Date","dateB","methods","ISOdate","chunks","split","months","parseInt","Increase","postID","$store","dispatch","fetchPosts","fetch","then","response","json","catch","err","console","log","message","mounted"],"sources":["C:\\Users\\karlk\\Documents\\2023Sygis\\WAD\\AH\\frontend\\src\\components\\Post.vue"],"sourcesContent":["<template>\r\n    <div class = \"postComp\">\r\n        <div class = \"post\" v-for = \"post in sortedPosts\" :key=\"id\">\r\n            <h2 v-if = \"post.isPinned\" class=\"pinned\">PINNED:</h2>\r\n            <div class = \"postHeader\">\r\n                <img class = \"userIcon\" :src = \"post.userIcon\"/>\r\n                <p class = \"userName\">{{ post.user }}</p>\r\n                <p class=\"date\">{{ post.transformedDate }}</p>\r\n            </div>\r\n            <div class=\"postContent\">\r\n                <router-link :to=\"{name: 'APost', params: {id: post.id}}\">\r\n                  <h1 class = \"title\">{{ post.title }}</h1>\r\n                </router-link>\r\n                <img class=\"postImage\" :src=post.postImage />\r\n                <p>{{ post.text }}</p>\r\n            </div>\r\n            \r\n            <div class = \"postDislikes\">\r\n                <img class = \"dislikesImg\" v-on:click=\"Increase(post.id)\" src=\"../assets/dislike.png\"/>\r\n                <p class = \"postDislikesP\">{{ post.dislikes }}</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"Post\",\r\n    data() {\r\n        return {\r\n            posts: [],\r\n        };\r\n    },\r\n    computed: {\r\n        postList(){\r\n            return this.posts.map(post => {\r\n                return {\r\n                    ...post,\r\n                    transformedDate : this.ISO8601ToText(post.date)\r\n                }\r\n            })\r\n        },\r\n        sortedPosts() {\r\n        // Sort posts by pinned status (pinned first) and then by date\r\n            return this.postList.slice().sort((a, b) => {\r\n                if (a.isPinned !== b.isPinned) {\r\n                    return b.isPinned - a.isPinned; // Pinned posts come first\r\n                }\r\n                // Convert ISO 8601 dates to Date objects for comparison\r\n                const dateA = new Date(a.date);\r\n                const dateB = new Date(b.date);\r\n                return dateB - dateA; // Sort by date if not pinned\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        ISO8601ToText(ISOdate) {\r\n            var chunks = ISOdate.split('-');\r\n            var months = [\r\n                'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n            ];\r\n            return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\r\n        },\r\n        Increase(postID) {\r\n            this.$store.dispatch(\"IncreaseDislikeAct\", postID)\r\n        },\r\n        fetchPosts() {\r\n            fetch(`http://localhost:3000/api/posts/`)\r\n                .then((response) => response.json())\r\n                .then((data) => (this.posts = data))\r\n                .catch((err) => console.log(err.message));\r\n        },\r\n    },\r\n    mounted() {\r\n        this.fetchPosts();\r\n        console.log(\"mounted\");\r\n    },\r\n};\r\n</script>\r\n\r\n<style>\r\n.post {\r\n    margin: 15px auto;\r\n    border-style: dotted;\r\n    border-color: hotpink;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n}\r\n\r\n.postHeader {\r\n    width: 95%;\r\n    margin: auto;\r\n    padding: 1%;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.postContent {\r\n    border-radius: 15px;\r\n    background-color: rgb(245, 189, 240);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.postDislikes{\r\n    display: flex;\r\n    flex-direction: row;\r\n    text-align: left;\r\n    padding: 1%;\r\n}\r\n.title {\r\n    padding-right: 8px;\r\n    font-size: 20px;\r\n}\r\n\r\n.post h1::first-letter {\r\n    font-size: 25px;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.userIcon {\r\n    float: left;\r\n    height: 50px;\r\n    width: 50px;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.userName{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n}\r\n\r\n.postImage {\r\n    align-self: center;\r\n    max-width: 60%;\r\n    object-fit: contain;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.pinned {\r\n    float: left;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.date {\r\n    margin-left: auto;\r\n    padding-left: 4px;\r\n    border-left: 2px solid black;\r\n}\r\n\r\n.dislikesImg{\r\n    height:10%;\r\n    width: 10%;\r\n    display: inline;\r\n}\r\n\r\n.dislikesImg:hover{\r\n    cursor: pointer;\r\n    opacity: 70%;\r\n}\r\n.postDislikesP{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    display: inline;\r\n}\r\n</style>"],"mappings":"AA4BA,eAAe;EACXA,IAAI,EAAE,MAAM;EACZC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE;IACX,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,QAAQA,CAAA,EAAE;MACN,OAAO,IAAI,CAACF,KAAK,CAACG,GAAG,CAACC,IAAG,IAAK;QAC1B,OAAO;UACH,GAAGA,IAAI;UACPC,eAAc,EAAI,IAAI,CAACC,aAAa,CAACF,IAAI,CAACG,IAAI;QAClD;MACJ,CAAC;IACL,CAAC;IACDC,WAAWA,CAAA,EAAG;MACd;MACI,OAAO,IAAI,CAACN,QAAQ,CAACO,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACxC,IAAID,CAAC,CAACE,QAAO,KAAMD,CAAC,CAACC,QAAQ,EAAE;UAC3B,OAAOD,CAAC,CAACC,QAAO,GAAIF,CAAC,CAACE,QAAQ,EAAE;QACpC;QACA;QACA,MAAMC,KAAI,GAAI,IAAIC,IAAI,CAACJ,CAAC,CAACJ,IAAI,CAAC;QAC9B,MAAMS,KAAI,GAAI,IAAID,IAAI,CAACH,CAAC,CAACL,IAAI,CAAC;QAC9B,OAAOS,KAAI,GAAIF,KAAK,EAAE;MAC1B,CAAC,CAAC;IACN;EACJ,CAAC;EACDG,OAAO,EAAE;IACLX,aAAaA,CAACY,OAAO,EAAE;MACnB,IAAIC,MAAK,GAAID,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAIC,MAAK,GAAI,CACT,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAI,CACpF;MACD,OAAOA,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAE,GAAIA,MAAM,CAAC,CAAC,IAAI,IAAG,GAAIA,MAAM,CAAC,CAAC,CAAC;IAC/E,CAAC;IACDI,QAAQA,CAACC,MAAM,EAAE;MACb,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,oBAAoB,EAAEF,MAAM;IACrD,CAAC;IACDG,UAAUA,CAAA,EAAG;MACTC,KAAK,CAAE,kCAAiC,EACnCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAClCF,IAAI,CAAE9B,IAAI,IAAM,IAAI,CAACC,KAAI,GAAID,IAAK,EAClCiC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC,CAAC;IACjD;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACV,UAAU,CAAC,CAAC;IACjBO,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EAC1B;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}