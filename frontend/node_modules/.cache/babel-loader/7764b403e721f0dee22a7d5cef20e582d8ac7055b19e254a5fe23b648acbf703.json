{"ast":null,"code":"export default {\n  name: \"Post\",\n  computed: {\n    post() {\n      for (let el of this.$store.state.postList) {\n        console.log(\"el.id: \" + el.id);\n        console.log(\"this.id: \" + this.$route.params.id);\n        if (el.id == this.$route.params.id) {\n          console.log('ISOdate:', el.date);\n          return {\n            ...el,\n            transformedDate: this.ISO8601ToText(el.date)\n          };\n        }\n      }\n    },\n    sortedPosts() {\n      // Sort posts by pinned status (pinned first) and then by date\n      return this.postList.slice().sort((a, b) => {\n        if (a.isPinned !== b.isPinned) {\n          return b.isPinned - a.isPinned; // Pinned posts come first\n        }\n        // Convert ISO 8601 dates to Date objects for comparison\n        const dateA = new Date(a.date);\n        const dateB = new Date(b.date);\n        return dateB - dateA; // Sort by date if not pinned\n      });\n    }\n  },\n  methods: {\n    ISO8601ToText(ISOdate) {\n      var chunks = ISOdate.split('-');\n      var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\n    },\n    Increase(postID) {\n      this.$store.dispatch(\"IncreaseDislikeAct\", postID);\n    }\n  }\n};","map":{"version":3,"names":["name","computed","post","el","$store","state","postList","console","log","id","$route","params","date","transformedDate","ISO8601ToText","sortedPosts","slice","sort","a","b","isPinned","dateA","Date","dateB","methods","ISOdate","chunks","split","months","parseInt","Increase","postID","dispatch"],"sources":["C:\\Users\\Marlene\\AH\\frontend\\src\\components\\OnePost.vue"],"sourcesContent":["<template>\r\n    <div class = \"post\">\r\n        <h2 v-if = \"post.isPinned\" class=\"pinned\">PINNED:</h2>   \r\n        <div class = \"postHeader\">\r\n            <img class = \"userIcon\" :src = \"post.userIcon\"/>\r\n            <p class = \"userName\">{{ post.user }}</p>\r\n            <p class=\"date\">{{ post.transformedDate }}</p>\r\n        </div>\r\n        <div class=\"postContent\">\r\n                <h1 class = \"title\">{{ post.title }}</h1>\r\n            <img class=\"postImage\" :src=post.postImage />\r\n            <p>{{ post.text }}</p>\r\n        </div>\r\n        \r\n        <div class = \"postDislikes\">\r\n            <img class = \"dislikesImg\" v-on:click=\"Increase(post.id)\" src=\"../../../frontend/src/assets/dislike.png\"/>\r\n            <p class = \"postDislikesP\">{{ post.dislikes }}</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"Post\",\r\n        computed: {\r\n            post(){\r\n                for (let el of this.$store.state.postList) {\r\n                    console.log(\"el.id: \" + el.id);\r\n                    console.log(\"this.id: \" + this.$route.params.id);\r\n                    if (el.id == this.$route.params.id) {\r\n                        console.log('ISOdate:', el.date);\r\n                        return {...el, transformedDate: this.ISO8601ToText(el.date)}\r\n                    }\r\n                }\r\n            },\r\n            sortedPosts() {\r\n                // Sort posts by pinned status (pinned first) and then by date\r\n                return this.postList.slice().sort((a, b) => {\r\n                    if (a.isPinned !== b.isPinned) {\r\n                        return b.isPinned - a.isPinned; // Pinned posts come first\r\n                    }\r\n                    // Convert ISO 8601 dates to Date objects for comparison\r\n                    const dateA = new Date(a.date);\r\n                    const dateB = new Date(b.date);\r\n                    return dateB - dateA; // Sort by date if not pinned\r\n                });\r\n            }\r\n        },\r\n        methods: {\r\n            ISO8601ToText(ISOdate) {\r\n                var chunks = ISOdate.split('-');\r\n                var months = [\r\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n                ];\r\n                return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\r\n            },\r\n            Increase(postID) {\r\n                this.$store.dispatch(\"IncreaseDislikeAct\", postID)\r\n            },\r\n        }\r\n    };\r\n</script>\r\n\r\n\r\n<style>\r\n.post {\r\n    margin: 15px auto;\r\n    border-style: dotted;\r\n    border-color: hotpink;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n}\r\n\r\n.postHeader {\r\n    width: 95%;\r\n    margin: auto;\r\n    padding: 1%;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.postContent {\r\n    border-radius: 15px;\r\n    background-color: rgb(245, 189, 240);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.postDislikes{\r\n    display: flex;\r\n    flex-direction: row;\r\n    text-align: left;\r\n    padding: 1%;\r\n}\r\n.title {\r\n    padding-right: 8px;\r\n    font-size: 20px;\r\n}\r\n\r\n.post h1::first-letter {\r\n    font-size: 25px;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.userIcon {\r\n    float: left;\r\n    height: 50px;\r\n    width: 50px;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.userName{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n}\r\n\r\n.postImage {\r\n    align-self: center;\r\n    max-width: 60%;\r\n    object-fit: contain;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.pinned {\r\n    float: left;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.date {\r\n    margin-left: auto;\r\n    padding-left: 4px;\r\n    border-left: 2px solid black;\r\n}\r\n\r\n.dislikesImg{\r\n    height:10%;\r\n    width: 10%;\r\n    display: inline;\r\n}\r\n\r\n.dislikesImg:hover{\r\n    cursor: pointer;\r\n    opacity: 70%;\r\n}\r\n.postDislikesP{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    display: inline;\r\n}\r\n</style>"],"mappings":"AAsBI,eAAe;EACXA,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE;IACNC,IAAIA,CAAA,EAAE;MACF,KAAK,IAAIC,EAAC,IAAK,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,QAAQ,EAAE;QACvCC,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIL,EAAE,CAACM,EAAE,CAAC;QAC9BF,OAAO,CAACC,GAAG,CAAC,WAAU,GAAI,IAAI,CAACE,MAAM,CAACC,MAAM,CAACF,EAAE,CAAC;QAChD,IAAIN,EAAE,CAACM,EAAC,IAAK,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,EAAE,EAAE;UAChCF,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEL,EAAE,CAACS,IAAI,CAAC;UAChC,OAAO;YAAC,GAAGT,EAAE;YAAEU,eAAe,EAAE,IAAI,CAACC,aAAa,CAACX,EAAE,CAACS,IAAI;UAAC;QAC/D;MACJ;IACJ,CAAC;IACDG,WAAWA,CAAA,EAAG;MACV;MACA,OAAO,IAAI,CAACT,QAAQ,CAACU,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACxC,IAAID,CAAC,CAACE,QAAO,KAAMD,CAAC,CAACC,QAAQ,EAAE;UAC3B,OAAOD,CAAC,CAACC,QAAO,GAAIF,CAAC,CAACE,QAAQ,EAAE;QACpC;QACA;QACA,MAAMC,KAAI,GAAI,IAAIC,IAAI,CAACJ,CAAC,CAACN,IAAI,CAAC;QAC9B,MAAMW,KAAI,GAAI,IAAID,IAAI,CAACH,CAAC,CAACP,IAAI,CAAC;QAC9B,OAAOW,KAAI,GAAIF,KAAK,EAAE;MAC1B,CAAC,CAAC;IACN;EACJ,CAAC;EACDG,OAAO,EAAE;IACLV,aAAaA,CAACW,OAAO,EAAE;MACnB,IAAIC,MAAK,GAAID,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAIC,MAAK,GAAI,CACT,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAI,CACpF;MACD,OAAOA,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAE,GAAIA,MAAM,CAAC,CAAC,IAAI,IAAG,GAAIA,MAAM,CAAC,CAAC,CAAC;IAC/E,CAAC;IACDI,QAAQA,CAACC,MAAM,EAAE;MACb,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,oBAAoB,EAAED,MAAM;IACrD;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}