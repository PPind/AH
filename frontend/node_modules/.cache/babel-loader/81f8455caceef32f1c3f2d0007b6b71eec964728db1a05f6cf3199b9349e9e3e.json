{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"postComp\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"pinned\"\n};\nconst _hoisted_3 = {\n  class: \"postHeader\"\n};\nconst _hoisted_4 = {\n  class: \"date\"\n};\nconst _hoisted_5 = {\n  class: \"postContent\"\n};\nconst _hoisted_6 = {\n  class: \"title\"\n};\nconst _hoisted_7 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.sortedPosts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"post\",\n      key: _ctx.id\n    }, [post.isPinned ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_2, \"PINNED:\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"p\", _hoisted_4, _toDisplayString(post.transformedDate), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_router_link, {\n      to: {\n        name: 'APost',\n        params: {\n          id: post.id\n        }\n      }\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"h1\", _hoisted_6, _toDisplayString(post.title), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]), _createElementVNode(\"img\", {\n      class: \"postImage\",\n      src: post.postImage\n    }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"p\", null, _toDisplayString(post.body), 1 /* TEXT */)]), _createCommentVNode(\"\\r\\n            <div class = \\\"postDislikes\\\">\\r\\n                <img class = \\\"dislikesImg\\\" v-on:click=\\\"Increase(post.id)\\\" src=\\\"../assets/dislike.png\\\"/>\\r\\n                <p class = \\\"postDislikesP\\\">{{ post.dislikes }}</p>\\r\\n            </div>\\r\\n        \")]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$options","sortedPosts","post","key","_ctx","id","isPinned","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","_toDisplayString","transformedDate","_hoisted_5","_createVNode","_component_router_link","to","name","params","_hoisted_6","title","src","postImage","body","_createCommentVNode"],"sources":["C:\\Users\\Marlene\\AH\\frontend\\src\\components\\Post.vue"],"sourcesContent":["<template>\r\n    <div class = \"postComp\">\r\n        <div class = \"post\" v-for = \"post in sortedPosts\" :key=\"id\">\r\n            <h2 v-if = \"post.isPinned\" class=\"pinned\">PINNED:</h2>\r\n            <div class = \"postHeader\">\r\n                <p class=\"date\">{{ post.transformedDate }}</p>\r\n            </div>\r\n            <div class=\"postContent\">\r\n                <router-link :to=\"{name: 'APost', params: {id: post.id}}\">\r\n                  <h1 class = \"title\">{{ post.title }}</h1>\r\n                </router-link>\r\n                <img class=\"postImage\" :src=post.postImage />\r\n                <p>{{ post.body }}</p>\r\n            </div>\r\n            <!--\r\n            <div class = \"postDislikes\">\r\n                <img class = \"dislikesImg\" v-on:click=\"Increase(post.id)\" src=\"../assets/dislike.png\"/>\r\n                <p class = \"postDislikesP\">{{ post.dislikes }}</p>\r\n            </div>\r\n        -->\r\n        </div>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\nname: \"Post\",\r\ndata() {\r\n    return {\r\n      posts: [],\r\n    };\r\n},    \r\ncomputed: {\r\n    postList(){\r\n        return this.posts.map(post => {\r\n            return {\r\n                ...post,\r\n                transformedDate : this.ISO8601ToText(post.date)\r\n            }\r\n        })\r\n    },\r\n    sortedPosts() {\r\n    // Sort posts by pinned status (pinned first) and then by date\r\n    return this.postList.slice().sort((a, b) => {\r\n      if (a.isPinned !== b.isPinned) {\r\n        return b.isPinned - a.isPinned; // Pinned posts come first\r\n      }\r\n      // Convert ISO 8601 dates to Date objects for comparison\r\n      const dateA = new Date(a.date);\r\n      const dateB = new Date(b.date);\r\n      return dateB - dateA; // Sort by date if not pinned\r\n    });\r\n  },\r\n},\r\nmethods: {\r\n    ISO8601ToText(ISOdate) {\r\n                var datePart = ISOdate.split('T')[0];\r\n                var chunks = datePart.split('-');\r\n                var months = [\r\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n                ];\r\n                return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\r\n            },\r\n    Increase(postID) {\r\n        this.$store.dispatch(\"IncreaseDislikeAct\", postID)\r\n    },\r\n    fetchPosts() {\r\n      fetch(`http://localhost:3000/api/posts/`)\r\n        .then((response) => response.json())\r\n        .then((data) => (this.posts = data))\r\n        .catch((err) => console.log(err.message));\r\n    },\r\n},\r\nmounted() {\r\n    this.fetchPosts();\r\n    console.log(\"mounted\");\r\n},\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.post {\r\n    margin: 15px auto;\r\n    border-style: dotted;\r\n    border-color: hotpink;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n}\r\n\r\n.postHeader {\r\n    width: 95%;\r\n    margin: auto;\r\n    padding: 1%;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.postContent {\r\n    border-radius: 15px;\r\n    background-color: rgb(245, 189, 240);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.postDislikes{\r\n    display: flex;\r\n    flex-direction: row;\r\n    text-align: left;\r\n    padding: 1%;\r\n}\r\n.title {\r\n    padding-right: 8px;\r\n    font-size: 20px;\r\n}\r\n\r\n.post h1::first-letter {\r\n    font-size: 25px;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.userIcon {\r\n    float: left;\r\n    height: 50px;\r\n    width: 50px;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.userName{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n}\r\n\r\n.postImage {\r\n    align-self: center;\r\n    max-width: 60%;\r\n    object-fit: contain;\r\n    margin: 5px 5px 5px 0;\r\n    padding-right: 2%;   \r\n}\r\n\r\n.pinned {\r\n    float: left;\r\n    color: rgb(174, 47, 111);\r\n}\r\n\r\n.date {\r\n    margin-left: auto;\r\n    padding-left: 4px;\r\n    border-left: 2px solid black;\r\n}\r\n\r\n.dislikesImg{\r\n    height:10%;\r\n    width: 10%;\r\n    display: inline;\r\n}\r\n\r\n.dislikesImg:hover{\r\n    cursor: pointer;\r\n    opacity: 70%;\r\n}\r\n.postDislikesP{\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    display: inline;\r\n}\r\n</style>"],"mappings":";;EACSA,KAAK,EAAG;AAAU;;;EAEYA,KAAK,EAAC;;;EAC5BA,KAAK,EAAG;AAAY;;EAClBA,KAAK,EAAC;AAAM;;EAEdA,KAAK,EAAC;AAAa;;EAEdA,KAAK,EAAG;AAAO;;;;uBARjCC,mBAAA,CAsBM,OAtBNC,UAsBM,I,kBArBFD,mBAAA,CAkBME,SAAA,QAAAC,WAAA,CAlB+BC,QAAA,CAAAC,WAAW,EAAnBC,IAAI;yBAAjCN,mBAAA,CAkBM;MAlBDD,KAAK,EAAG,MAAM;MAAgCQ,GAAG,EAAEC,IAAA,CAAAC;QACxCH,IAAI,CAACI,QAAQ,I,cAAzBV,mBAAA,CAAsD,MAAtDW,UAAsD,EAAZ,SAAO,K,mCACjDC,mBAAA,CAEM,OAFNC,UAEM,GADFD,mBAAA,CAA8C,KAA9CE,UAA8C,EAAAC,gBAAA,CAA3BT,IAAI,CAACU,eAAe,iB,GAE3CJ,mBAAA,CAMM,OANNK,UAMM,GALFC,YAAA,CAEcC,sBAAA;MAFAC,EAAE;QAAAC,IAAA;QAAAC,MAAA;UAAAb,EAAA,EAA+BH,IAAI,CAACG;QAAE;MAAA;;wBACpD,MAAyC,CAAzCG,mBAAA,CAAyC,MAAzCW,UAAyC,EAAAR,gBAAA,CAAlBT,IAAI,CAACkB,KAAK,iB;;iDAEnCZ,mBAAA,CAA6C;MAAxCb,KAAK,EAAC,WAAW;MAAE0B,GAAG,EAACnB,IAAI,CAACoB;yCACjCd,mBAAA,CAAsB,WAAAG,gBAAA,CAAhBT,IAAI,CAACqB,IAAI,iB,GAEnBC,mBAAA,6QAKD,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}