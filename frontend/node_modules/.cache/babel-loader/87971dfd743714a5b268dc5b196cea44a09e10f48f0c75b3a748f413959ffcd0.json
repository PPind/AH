{"ast":null,"code":"// @ is an alias to /sr\nimport OnePost from '@/components/OnePost.vue';\nimport AsideXD from '@/components/Aside.vue';\nimport HeaderXD from '@/components/Header.vue';\nimport FooterXD from '@/components/Footer.vue';\nexport default {\n  name: \"APost\",\n  components: {\n    OnePost,\n    AsideXD,\n    HeaderXD,\n    FooterXD\n  },\n  data() {\n    return {\n      post: {\n        title: \"\",\n        body: \"\",\n        date: \"\"\n      }\n    };\n  },\n  methods: {\n    ISO8601ToText(ISOdate) {\n      var chunks = ISOdate.split('-');\n      var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\n    },\n    fetchAPost(id) {\n      // fetch one post with the specied id (id)\n      fetch(`http://localhost:3000/api/posts/${id}`).then(response => response.json()).then(data => this.post = data).catch(err => console.log(err.message));\n    },\n    updatePost() {\n      // using Fetch - put method - updates a specific post based on the passed id and the specified body\n      fetch(`http://localhost:3000/api/posts/${this.post.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.post)\n      }).then(response => {\n        console.log(response.data);\n        //this.$router.push(\"/apost/\" + this.post.id);\n        // We are using the router instance of this element to navigate to a different URL location\n        this.$router.push(\"/\");\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    deletePost() {\n      // using Fetch - delete method - delets a specific post based on the passed id\n      fetch(`http://localhost:3000/api/posts/${this.post.id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        console.log(response.data);\n        // We are using the router instance of this element to navigate to a different URL location\n        this.$router.push(\"/\");\n      }).catch(e => {\n        console.log(e);\n      });\n    }\n  },\n  mounted() {\n    // call fetchAPost() when this element mounts, and pass to it a route parameter  (id)\n    // Route parameters (this.$route.params.id) are named URL segments that are used to capture the values specified at their \n    // position in the URL. The captured values are populated in the req.params object, with the name \n    // of the route parameter specified in the path as their respective keys\n    this.fetchAPost(this.$route.params.id);\n  }\n};","map":{"version":3,"names":["OnePost","AsideXD","HeaderXD","FooterXD","name","components","data","post","title","body","date","methods","ISO8601ToText","ISOdate","chunks","split","months","parseInt","fetchAPost","id","fetch","then","response","json","catch","err","console","log","message","updatePost","method","headers","JSON","stringify","$router","push","e","deletePost","mounted","$route","params"],"sources":["C:\\Users\\ppind\\Documents\\3 semester\\AH\\frontend\\src\\views\\APost.vue"],"sourcesContent":["<template>\r\n    <header-x-d></header-x-d>\r\n    <div class=\"home\">\r\n  \r\n      <aside-x-d class = \"aside1\"></aside-x-d>\r\n  \r\n      <div class=\"main\">\r\n        <h2 v-if = \"post.isPinned\" class=\"pinned\">PINNED:</h2>\r\n            <div class=\"postContent\">\r\n                <h1 class = \"title\">{{ post.title }}</h1>\r\n                \r\n                <label for=\"body\">Body: </label>\r\n      <input name=\"body\" type=\"text\" id=\"body\" required v-model=\"post.body\" />\r\n            </div>\r\n            <div class=\"nupud\">\r\n                <button @click=\"updatePost\" class=\"updatePost\">Update Post</button>\r\n                <button @click=\"deletePost\" class=\"deletePost\">Delete Post</button>\r\n            </div>\r\n      </div>\r\n      \r\n      \r\n      <aside-x-d class = \"aside2\"></aside-x-d>\r\n  \r\n    </div>\r\n    <footer-x-d></footer-x-d>\r\n  </template>\r\n  \r\n  <script>\r\n  // @ is an alias to /sr\r\n  import OnePost from '@/components/OnePost.vue'\r\n  import AsideXD from '@/components/Aside.vue'\r\n  import HeaderXD from '@/components/Header.vue'\r\n  import FooterXD from '@/components/Footer.vue'\r\n  \r\n  export default {\r\n    name: \"APost\",\r\n    components: {OnePost, AsideXD, HeaderXD, FooterXD},\r\n    data() {\r\n            return {\r\n                post: {\r\n                title: \"\",\r\n                body: \"\",\r\n                date: \"\",\r\n                \r\n            },\r\n            };\r\n        }, \r\n        \r\n        methods: {\r\n            ISO8601ToText(ISOdate) {\r\n                var chunks = ISOdate.split('-');\r\n                var months = [\r\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n                ];\r\n                return months[parseInt(chunks[1]) - 1] + \" \" + chunks[2] + \", \" + chunks[0];\r\n            },\r\n            fetchAPost(id) {\r\n            // fetch one post with the specied id (id)\r\n                fetch(`http://localhost:3000/api/posts/${id}`)\r\n                    .then((response) => response.json())\r\n                    .then((data) => (this.post = data))\r\n                    .catch((err) => console.log(err.message));\r\n            },\r\n            updatePost() {\r\n            // using Fetch - put method - updates a specific post based on the passed id and the specified body\r\n                fetch(`http://localhost:3000/api/posts/${this.post.id}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(this.post),\r\n            })\r\n                .then((response) => {\r\n                console.log(response.data);\r\n                //this.$router.push(\"/apost/\" + this.post.id);\r\n                // We are using the router instance of this element to navigate to a different URL location\r\n                this.$router.push(\"/\");\r\n                })\r\n                .catch((e) => {\r\n                console.log(e);\r\n                });\r\n            },\r\n            deletePost() {\r\n            // using Fetch - delete method - delets a specific post based on the passed id\r\n                fetch(`http://localhost:3000/api/posts/${this.post.id}`, {\r\n                    method: \"DELETE\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                })\r\n                    .then((response) => {\r\n                    console.log(response.data);\r\n                    // We are using the router instance of this element to navigate to a different URL location\r\n                    this.$router.push(\"/\");\r\n                    })\r\n                    .catch((e) => {\r\n                    console.log(e);\r\n                    });\r\n            },\r\n        },\r\n        mounted() {\r\n            // call fetchAPost() when this element mounts, and pass to it a route parameter  (id)\r\n            // Route parameters (this.$route.params.id) are named URL segments that are used to capture the values specified at their \r\n            // position in the URL. The captured values are populated in the req.params object, with the name \r\n            // of the route parameter specified in the path as their respective keys\r\n            this.fetchAPost(this.$route.params.id);\r\n        },\r\n        };\r\n  </script>\r\n  \r\n  <style>\r\n  .main {\r\n      background-color: rgb(255, 217, 252);\r\n      margin: 10px auto;\r\n      padding: 10px 20px;\r\n      min-width: 350px;\r\n      max-width: 60%;\r\n      border-radius: 15px;\r\n      flex-direction: row;\r\n      display: block;\r\n      flex: 1;\r\n  }\r\n  \r\n  .home {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  @media (max-width: 800px) {\r\n      .aside1, .aside2 {\r\n          display: none;\r\n      }\r\n  }\r\n  \r\n  .aside1, .aside2 {\r\n      background: rgb(255, 217, 252);\r\n      flex-basis: calc((100% - 960px) / 2);\r\n      padding: 20px;\r\n      max-width: 200px;\r\n      overflow: hidden;\r\n      border-radius: 15px;\r\n  }\r\n  .postContent {\r\n    border-radius: 15px;\r\n    background-color: rgb(245, 189, 240);\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom:2%;\r\n}\r\n  </style>"],"mappings":"AA4BE;AACA,OAAOA,OAAM,MAAO,0BAAyB;AAC7C,OAAOC,OAAM,MAAO,wBAAuB;AAC3C,OAAOC,QAAO,MAAO,yBAAwB;AAC7C,OAAOC,QAAO,MAAO,yBAAwB;AAE7C,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE;IAACL,OAAO;IAAEC,OAAO;IAAEC,QAAQ;IAAEC;EAAQ,CAAC;EAClDG,IAAIA,CAAA,EAAG;IACC,OAAO;MACHC,IAAI,EAAE;QACNC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE;MAEV;IACA,CAAC;EACL,CAAC;EAEDC,OAAO,EAAE;IACLC,aAAaA,CAACC,OAAO,EAAE;MACnB,IAAIC,MAAK,GAAID,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAIC,MAAK,GAAI,CACT,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAI,CACpF;MACD,OAAOA,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAE,GAAIA,MAAM,CAAC,CAAC,IAAI,IAAG,GAAIA,MAAM,CAAC,CAAC,CAAC;IAC/E,CAAC;IACDI,UAAUA,CAACC,EAAE,EAAE;MACf;MACIC,KAAK,CAAE,mCAAkCD,EAAG,EAAC,EACxCE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAClCF,IAAI,CAAEf,IAAI,IAAM,IAAI,CAACC,IAAG,GAAID,IAAK,EACjCkB,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC,CAAC;IACjD,CAAC;IACDC,UAAUA,CAAA,EAAG;MACb;MACIT,KAAK,CAAE,mCAAkC,IAAI,CAACb,IAAI,CAACY,EAAG,EAAC,EAAE;QACrDW,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACT,cAAc,EAAE;QAChB,CAAC;QACDtB,IAAI,EAAEuB,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC1B,IAAI;MACtC,CAAC,EACIc,IAAI,CAAEC,QAAQ,IAAK;QACpBI,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAChB,IAAI,CAAC;QAC1B;QACA;QACA,IAAI,CAAC4B,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACtB,CAAC,EACAX,KAAK,CAAEY,CAAC,IAAK;QACdV,OAAO,CAACC,GAAG,CAACS,CAAC,CAAC;MACd,CAAC,CAAC;IACN,CAAC;IACDC,UAAUA,CAAA,EAAG;MACb;MACIjB,KAAK,CAAE,mCAAkC,IAAI,CAACb,IAAI,CAACY,EAAG,EAAC,EAAE;QACrDW,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAClD,CAAC,EACIV,IAAI,CAAEC,QAAQ,IAAK;QACpBI,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAChB,IAAI,CAAC;QAC1B;QACA,IAAI,CAAC4B,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACtB,CAAC,EACAX,KAAK,CAAEY,CAAC,IAAK;QACdV,OAAO,CAACC,GAAG,CAACS,CAAC,CAAC;MACd,CAAC,CAAC;IACV;EACJ,CAAC;EACDE,OAAOA,CAAA,EAAG;IACN;IACA;IACA;IACA;IACA,IAAI,CAACpB,UAAU,CAAC,IAAI,CAACqB,MAAM,CAACC,MAAM,CAACrB,EAAE,CAAC;EAC1C;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}